/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

/**
 *
 * @author alisherka7
 */
public class MultiPlay extends javax.swing.JFrame {

    String name;
    /**
     * Creates new form multi
     */
    public MultiPlay(String title) throws Exception {
//    	clientStart();
        initComponents();
        currentStatus.append("\n waiting for 2player..... \n");
        playerName.setText(title);
    }
    
     private static String host = "localhost";
    private static Integer port = 1340;

    private static String msgRules = "this is msg rulles";
    
    void clientStart(String option) throws Exception
    {
        s.setEnabled(false);
        r.setEnabled(false);
        p.setEnabled(false);

    	String input = "";
    	String response;
        

    	BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in));
    	Socket clientSocket = new Socket(MultiPlay.host, MultiPlay.port);
    	DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
    	BufferedReader inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

    	do {

    	    if (input.equals("-rules")) {
    		System.out.println(MultiPlay.msgRules);
    	    }

            currentStatus.append("가위 | 바위 | 보 중 하나를 선택하세요 \n");
    	    System.out
    		    .println("(S)가위 | (R)바위 | (P)보 ");
    	    input = option;

    	} while (!input.equals("S") && !input.equals("R") && !input.equals("P"));

    	// Transmit input to the server and provide some feedback for the user
    	outToServer.writeBytes(input + "\n");
        
        currentStatus.append(input + "\n");
    	System.out
    		.println("\n("
    			+ input
    			+ ") . ..");

    	response = inFromServer.readLine();
        if(response.equals("YOU WIN")){
            winLose.setText("YOU WIN");
            winLose.setForeground(Color.GREEN);
            if(option.equals("S")){
                ImageIcon image = new ImageIcon("img/pR.png");
                sPlayerIcon.setIcon(image);
            }if(option.equals("R")){
                ImageIcon image = new ImageIcon("img/sR.png");
                sPlayerIcon.setIcon(image);
            }if(option.equals("P")){
                ImageIcon image = new ImageIcon("img/rR.png");
                sPlayerIcon.setIcon(image);
            }
        }if(response.equals("YOU LOSE")){
            winLose.setText("YOU LOSE");
            winLose.setForeground(Color.RED);
            if(option.equals("S")){
                ImageIcon image = new ImageIcon("img/rR.png");
                sPlayerIcon.setIcon(image);
            }if(option.equals("R")){
                ImageIcon image = new ImageIcon("img/pR.png");
                sPlayerIcon.setIcon(image);
            }if(option.equals("P")){
                ImageIcon image = new ImageIcon("img/sR.png");
                sPlayerIcon.setIcon(image);
            }
        }if(response.equals("DRAW")){
            winLose.setText("DRAW");
            winLose.setForeground(Color.BLACK);
            if(option.equals("S")){
                ImageIcon image = new ImageIcon("img/sR.png");
                sPlayerIcon.setIcon(image);
            }if(option.equals("R")){
                ImageIcon image = new ImageIcon("img/rR.png");
                sPlayerIcon.setIcon(image);
            }if(option.equals("P")){
                ImageIcon image = new ImageIcon("img/pR.png");
                sPlayerIcon.setIcon(image);
            }
        }
        currentStatus.append(response);

    	System.out.println("Response from server: " + response);

        
        

    	// Close socket
    	clientSocket.close();
        s.setEnabled(true);
        r.setEnabled(true);
        p.setEnabled(true);

    }
    
    public String retOption(String ch){
        return ch;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        currentStatus = new javax.swing.JTextArea();
        s = new javax.swing.JButton();
        r = new javax.swing.JButton();
        p = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        playerName = new javax.swing.JLabel();
        player2 = new javax.swing.JLabel();
        playerIcon = new javax.swing.JLabel();
        sPlayerIcon = new javax.swing.JLabel();
        winLose = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        currentStatus.setColumns(20);
        currentStatus.setRows(5);
        jScrollPane1.setViewportView(currentStatus);

        s.setIcon(new javax.swing.ImageIcon("/Users/alisherka7/NetBeansProjects/tcpNetworkGame/src/main/s.png")); // NOI18N
        s.setText("jButton1");
        s.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sActionPerformed(evt);
            }
        });

        r.setIcon(new javax.swing.ImageIcon("/Users/alisherka7/NetBeansProjects/tcpNetworkGame/src/main/r.png")); // NOI18N
        r.setText("jButton1");
        r.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rActionPerformed(evt);
            }
        });

        p.setIcon(new javax.swing.ImageIcon("/Users/alisherka7/NetBeansProjects/tcpNetworkGame/src/main/p.png")); // NOI18N
        p.setText("jButton1");
        p.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PVP 게임");

        playerName.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        playerName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playerName.setText("Player1");

        player2.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        player2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        player2.setText("Player2");

        playerIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        sPlayerIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        winLose.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        winLose.setForeground(new java.awt.Color(102, 102, 102));
        winLose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(playerName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(player2)
                .addGap(60, 60, 60))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(s, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(r, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(p, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(playerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(winLose, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(sPlayerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerName)
                    .addComponent(player2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(winLose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(playerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sPlayerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(s, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(p, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sActionPerformed
        try {
            // TODO add your handling code here:
            ImageIcon image = new ImageIcon("img/sR.png");
            playerIcon.setIcon(image);
            clientStart("S");
            currentStatus.append("waiting for 2player..... \n");
            
        } catch (Exception ex) {
            Logger.getLogger(MultiPlay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sActionPerformed

    private void rActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            ImageIcon image = new ImageIcon("img/rR.png");
            playerIcon.setIcon(image);
            clientStart("R");
            
            currentStatus.append("waiting for 2player..... \n");
        } catch (Exception ex) {
            Logger.getLogger(MultiPlay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rActionPerformed

    private void pActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            ImageIcon image = new ImageIcon("img/pR.png");
            playerIcon.setIcon(image);
            clientStart("P");
            currentStatus.append("waiting for 2player..... \n");
        } catch (Exception ex) {
            Logger.getLogger(MultiPlay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MultiPlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MultiPlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MultiPlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MultiPlay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    MultiPlay mp = new MultiPlay("player1");
                    mp.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MultiPlay.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea currentStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton p;
    private javax.swing.JLabel player2;
    private javax.swing.JLabel playerIcon;
    private javax.swing.JLabel playerName;
    private javax.swing.JButton r;
    private javax.swing.JButton s;
    private javax.swing.JLabel sPlayerIcon;
    private javax.swing.JLabel winLose;
    // End of variables declaration//GEN-END:variables
}
